import _m0 from 'protobufjs/minimal';
export declare const protobufPackage = "yandex.cloud.compute.v1";
/** A Disk resource. For more information, see [Disks](/docs/compute/concepts/disk). */
export interface Disk {
    /** ID of the disk. */
    id: string;
    /** ID of the folder that the disk belongs to. */
    folderId: string;
    createdAt: Date | undefined;
    /** Name of the disk. 1-63 characters long. */
    name: string;
    /** Description of the disk. 0-256 characters long. */
    description: string;
    /** Resource labels as `key:value` pairs. Maximum of 64 per resource. */
    labels: {
        [key: string]: string;
    };
    /** ID of the disk type. */
    typeId: string;
    /** ID of the availability zone where the disk resides. */
    zoneId: string;
    /** Size of the disk, specified in bytes. */
    size: number;
    /** Block size of the disk, specified in bytes. */
    blockSize: number;
    /**
     * License IDs that indicate which licenses are attached to this resource.
     * License IDs are used to calculate additional charges for the use of the virtual machine.
     *
     * The correct license ID is generated by Yandex.Cloud. IDs are inherited by new resources created from this resource.
     *
     * If you know the license IDs, specify them when you create the image.
     * For example, if you create a disk image using a third-party utility and load it into Yandex Object Storage, the license IDs will be lost.
     * You can specify them in the [yandex.cloud.compute.v1.ImageService.Create] request.
     */
    productIds: string[];
    /** Current status of the disk. */
    status: Disk_Status;
    /** ID of the image that was used for disk creation. */
    sourceImageId: string | undefined;
    /** ID of the snapshot that was used for disk creation. */
    sourceSnapshotId: string | undefined;
    /** Array of instances to which the disk is attached. */
    instanceIds: string[];
    /** Placement policy configuration. */
    diskPlacementPolicy: DiskPlacementPolicy | undefined;
}
export declare enum Disk_Status {
    STATUS_UNSPECIFIED = 0,
    /** CREATING - Disk is being created. */
    CREATING = 1,
    /** READY - Disk is ready to use. */
    READY = 2,
    /** ERROR - Disk encountered a problem and cannot operate. */
    ERROR = 3,
    /** DELETING - Disk is being deleted. */
    DELETING = 4,
    UNRECOGNIZED = -1
}
export declare function disk_StatusFromJSON(object: any): Disk_Status;
export declare function disk_StatusToJSON(object: Disk_Status): string;
export interface Disk_LabelsEntry {
    key: string;
    value: string;
}
export interface DiskPlacementPolicy {
    /** Placement group ID. */
    placementGroupId: string;
}
export declare const Disk: {
    encode(message: Disk, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Disk;
    fromJSON(object: any): Disk;
    toJSON(message: Disk): unknown;
    fromPartial(object: DeepPartial<Disk>): Disk;
};
export declare const Disk_LabelsEntry: {
    encode(message: Disk_LabelsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Disk_LabelsEntry;
    fromJSON(object: any): Disk_LabelsEntry;
    toJSON(message: Disk_LabelsEntry): unknown;
    fromPartial(object: DeepPartial<Disk_LabelsEntry>): Disk_LabelsEntry;
};
export declare const DiskPlacementPolicy: {
    encode(message: DiskPlacementPolicy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DiskPlacementPolicy;
    fromJSON(object: any): DiskPlacementPolicy;
    toJSON(message: DiskPlacementPolicy): unknown;
    fromPartial(object: DeepPartial<DiskPlacementPolicy>): DiskPlacementPolicy;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
